/*
**             ------ IMPORTANT ------
** This file was generated by ZeroCode2 on 18/Dec/2020 22:34:54
** DO NOT MODIFY IT, as it can be regenerated at any moment.
** If you need this file changed, change the underlying model or its template.
*/
using APIUtils.APIMessaging;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace upromiscontractapi.Models
{

    public class ContractRepository : IContractRepository
    {
        ContractDbContext Context { get; set; }

        public ContractRepository(ContractDbContext context)
        {
            Context = context;

        }
        public IQueryable<Contract> List => Context.Contracts
                .Include(p => p.Proposal)
        ;

        public async Task<ContractDTO> Post(SaveMessage<ContractDTO> rec)
        {
            // TODO: add validations
            // TODO: check for new users to create in the team composition list

            Contract record = Transformers.Transform(rec.DataSubject, new Contract()) as Contract;

            record.Payments.ForEach(pi =>
            {
                pi.Contract = record;
            });
            record.Teammembers.ForEach(pi =>
            {
                pi.Contract = record;
            });

//            record.AccountInfo = Context.AccountInfo.FirstOrDefault();

//            record.ParentContract = Context.Contracts.Find(rec.DataSubject.ParentContractID);

            Context.Contracts.Add(record);

            await Context.SaveChangesAsync();

            return Transformers.Transform(record, new ContractDTO());
        }

        public async Task<ContractDTO> Put(SaveMessage<ContractDTO> rec)
        {
            var ctr = await Context.Contracts.Where(c => c.ID == rec.ID)
                .Include( p => p.Payments)
                .Include( p => p.Teammembers)
                .Include(p => p.Proposal)
                .FirstOrDefaultAsync();

            if (ctr == null)
            {
                return null;
            }

            ctr = Transformers.Transform(rec.DataSubject, ctr);

            await Context.SaveChangesAsync();

            return Transformers.Transform(ctr, new ContractDTO());
        }

        public async Task<bool> Delete(SaveMessage<ContractDTO> rec)
        {
            var ctr = Context.Contracts.FirstOrDefault(c => c.ID == rec.ID);

            if (ctr == null)
            {
                return false;
            }

            Context.Contracts.Remove(ctr);

            await Context.SaveChangesAsync();

            return true;
        }

        public async Task<ContractDTO> Get(int id)
        {
            var record = await Context.Contracts.Where(c => c.ID == id)
                .Include( p => p.Payments)
                .Include( p => p.Teammembers)
                .Include(p => p.Proposal)
                .FirstOrDefaultAsync();

            var ctr = Transformers.Transform(record, new ContractDTO() { Modifier = "Unchanged" });

            return ctr;
        }

        public async Task<List<ListValue>> GetProposalIdReference()
        {
        var ct = Context;
        var records = ct.Proposals;
        return await records.Select( s => new ListValue() { Value = s.ID, Label = s.Title}).ToListAsync();
}


    }
}
