/*
**             ------ IMPORTANT ------
** This file was generated by ZeroCode2 on 28/Dec/2020 21:46:19
** DO NOT MODIFY IT, as it can be regenerated at any moment.
** If you need this file changed, change the underlying model or its template.
*/
using APIUtils.APIMessaging;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Linq.Dynamic.Core;

namespace upromiscontractapi.Models
{

    public class ContractRepository : IContractRepository
    {
        ContractDbContext Context { get; set; }

        public ContractRepository(ContractDbContext context)
        {
            Context = context;

        }
        public IQueryable<Contract> List => Context.Contracts
                .Include(p => p.Proposal)
        ;

        public async Task<(List<Contract>, double)> FilteredAndSortedList(SortAndFilterInformation sortAndFilterInfo, bool paging)
        {
            return await DoSortFilterAndPaging(sortAndFilterInfo, paging);
        }

        private async Task<(List<Contract>, double)> DoSortFilterAndPaging(SortAndFilterInformation sentModel, bool doPaging)
        {
            string whereClause = String.Empty;
            var records = List;
            int filteredCount = records.Count();

            if (sentModel != null)
            {
                // filtering
                // column search is handled here:0
                if (sentModel.filtered != null)
                {
                    foreach (var item in sentModel.filtered)
                    {
                        if (!String.IsNullOrEmpty(item.value))
                        {
                            whereClause = whereClause + item.id + ".ToString().Contains(\"" + item.value + "\") &&";
                        }
                    }
                    if (!string.IsNullOrEmpty(whereClause))
                    {
                        whereClause = whereClause[0..^2];
                        records = records.Where(whereClause);
                        filteredCount = await records.CountAsync();
                    }
                }
                // ordering
                if (sentModel.sorted != null)
                {
                    string orderBy = "";
                    foreach (var o in sentModel.sorted)
                    {
                        orderBy += " " + o.id + (o.desc ? " DESC" : " ASC") + ",";
                    }
                    if (orderBy.EndsWith(','))
                    {
                        orderBy = orderBy[0..^1];
                    }
                    if (!string.IsNullOrEmpty(orderBy))
                    {
                        records = records.OrderBy(orderBy);
                    }
                }

                // paging:
                if (doPaging)
                {
                    records = records
                        .Skip(sentModel.page * sentModel.pageSize)
                        .Take(sentModel.pageSize);
                }
            }
            return (await records.ToListAsync(), sentModel?.pageSize != 0 ? Math.Ceiling((double)(filteredCount / sentModel.pageSize)) : 1.0);
        }


        public async Task<Contract> Post(Contract rec)
        {
            var record = rec;
            // TODO: add validations
            // TODO: check for new users to create in the team composition list
            record.Payments.ForEach(pi =>
            {
                pi.Contract = record;
            });
            record.Teammembers.ForEach(pi =>
            {
                pi.Contract = record;
            });

//            record.AccountInfo = Context.AccountInfo.FirstOrDefault();

//            record.ParentContract = Context.Contracts.Find(rec.DataSubject.ParentContractID);

            Context.Contracts.Add(record);

            await Context.SaveChangesAsync();

            return record;
        }

        public async Task<Contract> Put(Contract rec)
        {
            Context.Contracts.Attach(rec);

            await Context.SaveChangesAsync();

            return rec;
        }

        public async Task<bool> Delete(Contract rec)
        {
            var ctr = Context.Contracts.FirstOrDefault(c => c.ID == rec.ID);

            if (ctr == null)
            {
                return false;
            }

            Context.Contracts.Remove(ctr);

            await Context.SaveChangesAsync();

            return true;
        }

        public async Task<Contract> Get(int id)
        {
            var record = await Context.Contracts.Where(c => c.ID == id)
                .Include( p => p.Payments)
                .Include( p => p.Teammembers)
                .Include(p => p.Proposal)
                .FirstOrDefaultAsync();
            return record;
        }

        public async Task<List<ListValue>> GetProposalIdReference()
        {
        var ct = Context;
        var records = ct.Proposals;
        return await records.Select( s => new ListValue() { Value = s.ID, Label = s.Title}).ToListAsync();
}


    }
}
