/*
**             ------ IMPORTANT ------
** This file was generated by ZeroCode2 on 18/Dec/2020 22:34:52
** DO NOT MODIFY IT, as it can be regenerated at any moment.
** If you need this file changed, change the underlying model or its template.
*/
using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.AspNetCore.Mvc;
using OfficeOpenXml;
using System.Linq.Dynamic.Core;
using upromiscontractapi.Models;
using Microsoft.Extensions.Logging;
using APIUtils;
using APIUtils.APIMessaging;
using Microsoft.AspNetCore.Authorization;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;

namespace upromiscontractapi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public class AccountInfoController : ControllerBase
    {
        private readonly IAccountInfoRepository Repository;
        private readonly ILogger Logger;

        public AccountInfoController(IAccountInfoRepository repo, ILoggerProvider loggerProvider)
        {
            Repository = repo;
            Logger = loggerProvider.CreateLogger("AccountInfoController");
        }

        [NonAction]
        private (IQueryable<T>, double) DoSortFilterAndPaging<T>(IQueryable<T> records, DataTableAjaxPostModel sentModel, bool doPaging)
        {
            string whereClause = String.Empty;
            int filteredCount = records.Count();

            if (sentModel != null)
            {
                // filtering
                // column search is handled here:0
                if (sentModel.filtered != null)
                {
                    foreach (var item in sentModel.filtered)
                    {
                        if (!String.IsNullOrEmpty(item.value))
                        {
                            whereClause = whereClause + item.id + ".ToString().Contains(\"" + item.value + "\") &&";
                        }
                    }
                    if (!string.IsNullOrEmpty(whereClause))
                    {
                        whereClause = whereClause[0..^2];
                        records = records.Where(whereClause);
                        filteredCount = records.Count();
                    }
                }
                // ordering
                if (sentModel.sorted != null)
                {
                    string orderBy = "";
                    foreach (var o in sentModel.sorted)
                    {
                        orderBy += " " + o.id + (o.desc ? " DESC" : " ASC") + ",";
                    }
                    if (orderBy.EndsWith(','))
                    {
                        orderBy = orderBy[0..^1];
                    }
                    if (!string.IsNullOrEmpty(orderBy))
                    {
                        records = records.OrderBy(orderBy);
                    }
                }

                // paging:
                if (doPaging)
                {
                    records = records
                        .Skip(sentModel.page * sentModel.pageSize)
                        .Take(sentModel.pageSize);
                }
            }
            return (records, sentModel?.pageSize != 0 ? Math.Ceiling((double)(filteredCount / sentModel.pageSize)) : 1.0);
        }

        [HttpGet("{id}")]
        public async Task<ActionResult> Get(int id)
        {
            var res = await Repository.Get(id);

            if (res == null)
            {
                return NotFound(new APIResult<AccountInfoDTO>() { ID = id, DataSubject = null, Message = "Get failed" });
            }

            return Ok(new APIResult<AccountInfoDTO>() { ID = id, DataSubject = res, Message = "Get was performed" });
        }

        [HttpPost()]
        public async Task<ActionResult> Post([FromBody] SaveMessage<AccountInfoDTO> rec)
        {
            AccountInfoDTO res;

            Logger.Log(LogLevel.Information, rec.Action + "/" + rec.SubAction);

            try
            {
                res = await Repository.Post(rec);
            }
            catch (Exception ex)
            {
                return this.Problem(ex.Message, GetType().Name, 500, "Error");
            }

            // return posted values
            return Ok(new APIResult<AccountInfoDTO>() { ID = res.ID, DataSubject = res, Message = "New AccountInfo was created." });
        }

        [HttpPut()]
        public async Task<ActionResult> Put([FromBody] SaveMessage<AccountInfoDTO> rec)
        {
            AccountInfoDTO res;

            Logger.Log(LogLevel.Information, rec.Action + "/" + rec.SubAction);

            try
            {
                res = await Repository.Put(rec);
                if (res == null)
                {
                    return NotFound(new APIResult<AccountInfoDTO>() { ID = rec.ID, DataSubject = null, Message = "Put failed - record is not found" });
                }
            }
            catch (Exception ex)
            {
                return this.Problem(ex.Message, GetType().Name, 500, "Error");
            }

            // return posted values
            return Ok(new APIResult<AccountInfoDTO>() { ID = res.ID, DataSubject = res, Message = "AccountInfo was saved." });
        }

        [HttpDelete()]
        public async Task<ActionResult> Delete([FromBody] SaveMessage<AccountInfoDTO> rec)
        {
            bool res;

            Logger.Log(LogLevel.Information, rec.Action + "/" + rec.SubAction);

            try
            {
                res = await Repository.Delete(rec);
                if (res == false)
                {
                    return NotFound(new APIResult<AccountInfoDTO>() { ID = rec.ID, DataSubject = null, Message = "Delete failed - record not found" });
                }
            }
            catch (Exception ex)
            {
                return this.Problem(ex.Message, GetType().Name, 500, "Error");
            }

            // return 
            return Ok(new APIResult<AccountInfoDTO>() { ID = rec.ID, DataSubject = null, Message = "AccountInfo was deleted." });
        }

        // TODO: transform into a get with a body (this is possible)
        [HttpPost("getlist")]
        public async Task<ActionResult> GetList([FromBody] DataTableAjaxPostModel sentModel)
        {
            var records = DoSortFilterAndPaging(Repository.List, sentModel, true);
            var recordsDTO = records.Item1.Select(c => Transformers.Transform(c, new AccountInfoDTO() { Modifier = "Unchanged" }));

            return Ok(new LoadResult<AccountInfoDTO>() { Data = await recordsDTO.ToArrayAsync(), Pages = records.Item2, Message = "" });
        }

        // TODO: this can be a normal "get", with a filter on the header " 'Content-Type': 'application/excel' or something
        [HttpPost("getforexport")]
        public async Task<IActionResult> GetForExport([FromBody] DataTableAjaxPostModel sentModel)
        {
            using ExcelPackage package = new ExcelPackage();
            ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("AccountInfo List");
            //Add the headers
            int col = 0;
            int row = 1;
            col++;
            worksheet.Cells[row, col].Value = "ID";
            col++;
            worksheet.Cells[row, col].Value = "Code";
            col++;
            worksheet.Cells[row, col].Value = "Title";
            col++;
            worksheet.Cells[row, col].Value = "Description";
            worksheet.Cells[1, 1, 1, col].Style.Font.Bold = true;

            var records = DoSortFilterAndPaging(Repository.List, sentModel, false).Item1;

            foreach (var item in records)
            {
                row++;
                col = 1;
                worksheet.Cells[row, col].Value = item.ID;
                col++;
                worksheet.Cells[row, col].Value = item.Code;
                col++;
                worksheet.Cells[row, col].Value = item.Title;
                col++;
                worksheet.Cells[row, col].Value = item.Description;
                col++;
            }

            System.IO.MemoryStream fs = new System.IO.MemoryStream();
            await package.SaveAsAsync(fs);

            return File(fs.ToArray(), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        }

        // TODO: make into a get with a body
        [Route("getselectvalues")]
        [HttpPost]
        public async Task<ActionResult> GetSelectValues([FromBody] ListValueInfo info)
        {
            //var EnumProducer = new SelectValueFromEnumProducer();
            List<ListValue> list = new List<ListValue>();

            // provide empty value in the dropdown:
            list.Add(new ListValue() { Value = "", Label = "" });

            switch (info.ValueType)
            {
                case "AccountInfoMemberType" :
                     list.AddRange( Models.AccountTeamComposition.AccountInfoMemberTypeValues);
                    break;
                case "ContractType" :
                     list.AddRange( Models.Contract.ContractTypeValues);
                    break;
                case "ContractStatus" :
                     list.AddRange( Models.Contract.ContractStatusValues);
                    break;
                case "ProposalIdReference" :
                    list.AddRange(await this.Repository.GetProposalIdReference());
                    break;
                case "ProposalStatus" :
                     list.AddRange( Models.Proposal.ProposalStatusValues);
                    break;
                case "ProposalType" :
                     list.AddRange( Models.Proposal.ProposalTypeValues);
                    break;
                case "RequestStatus" :
                     list.AddRange( Models.Request.RequestStatusValues);
                    break;
                case "RequestType" :
                     list.AddRange( Models.Request.RequestTypeValues);
                    break;
                default:
                    break;
            }
            return Ok(new ListValues() { ValueType = info.ValueType, data = list });
        }

        [HttpGet("getclaims/{UserID}")]
        [Authorize()]
        public async Task<IActionResult> GetClaims(string UserID)
        {
            var claims = Repository.List.Select(c => Transformers.Transform(c, new AccountInfoDTO() { Modifier = "Unchanged" }))
                .Where(c => c.Teammembers.Any(t => t.TeamMember.ToString().Equals(UserID)))
                .Select(c => new { 
                    Key = "AccountInfo|" + c.ID, 
                    Value = c.Teammembers
                        .First(t => t.TeamMember.ToString().Equals(UserID)).AccountInfoMemberType.ToString() 
                });
            return new JsonResult(await claims.ToArrayAsync());
        }

    }
}
